name: Build and publish a new version

on:
  pull_request_target:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    if: (startsWith(github.head_ref, 'release-') && github.event.pull_request.merged == true)
    name: Build Skyline
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true

      - name: Copy pyproject.toml
        run: |
          cp pyproject.toml ./skyline/
          NEXT_CLI_VERSION=$(poetry version --short)
          echo "NEXT_CLI_VERSION=$NEXT_CLI_VERSION" >> $GITHUB_ENV

      - name: Build Python package
        run: |
          poetry build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NEXT_CLI_VERSION }}
          path: dist/*${{ env.NEXT_CLI_VERSION }}*

  publish-release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.NEXT_CLI_VERSION }}
          path: dist

      - name: Publish a draft release
        run: |
          NEXT_CLI_VERSION=${{ env.NEXT_CLI_VERSION }}
          RELEASE_NOTES="$(git log $(git describe --abbrev=0 --tags).. --merges --pretty=format:"%s %b" | cut -f 4,7- -d ' ')"
          echo "Autogenerated Release Notes:"
          echo "$RELEASE_NOTES"
          RELEASE_ARTIFACTS=$(find ./dist -name "*$NEXT_CLI_VERSION*" -type f | paste -s -d ' ' - )
          VERSION_TAG="v$NEXT_CLI_VERSION"
          gh auth login --with-token <<< "${{ secrets.GH_TOKEN }}"
          gh release create "$VERSION_TAG" --draft \
                                  --title "$VERSION_TAG" \
                                  --notes "$RELEASE_NOTES" \
                                  --target "$GITHUB_SHA" \
                                  $RELEASE_ARTIFACTS

  publish-to-test-pypi:
    name: Publish to Test PyPI
    if: startsWith(github.ref, 'refs/tags')
    needs: publish-release
    runs-on: ubuntu-latest
    environment: Test
    concurrency: Test

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true

      - name: Fetch current version
        run: |
          echo "NEXT_CLI_VERSION=$(poetry version --short)" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.NEXT_CLI_VERSION }}
          path: dist

      - name: Display structure of downloaded files
        run: ls -Ral
        working-directory: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags')
    needs: publish-to-test-pypi
    runs-on: ubuntu-latest
    environment: Production
    concurrency: Production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true

      - name: Fetch current version
        run: |
          echo "NEXT_CLI_VERSION=$(poetry version --short)" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.NEXT_CLI_VERSION }}
          path: dist

      - name: Display structure of downloaded files
        run: ls -Ral
        working-directory: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          repository_url: https://pypi.org/legacy/
