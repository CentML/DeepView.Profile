/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.innpv.protocol.ActivationEntry', null, global);
goog.exportSymbol('proto.innpv.protocol.AnalysisError', null, global);
goog.exportSymbol('proto.innpv.protocol.AnalysisRequest', null, global);
goog.exportSymbol('proto.innpv.protocol.FileReference', null, global);
goog.exportSymbol('proto.innpv.protocol.FromClient', null, global);
goog.exportSymbol('proto.innpv.protocol.FromServer', null, global);
goog.exportSymbol('proto.innpv.protocol.InitializeRequest', null, global);
goog.exportSymbol('proto.innpv.protocol.InitializeResponse', null, global);
goog.exportSymbol('proto.innpv.protocol.MemoryUsageResponse', null, global);
goog.exportSymbol('proto.innpv.protocol.Path', null, global);
goog.exportSymbol('proto.innpv.protocol.ProtocolError', null, global);
goog.exportSymbol('proto.innpv.protocol.ProtocolError.ErrorCode', null, global);
goog.exportSymbol('proto.innpv.protocol.RunTimeEntry', null, global);
goog.exportSymbol('proto.innpv.protocol.RunTimeResponse', null, global);
goog.exportSymbol('proto.innpv.protocol.ThroughputResponse', null, global);
goog.exportSymbol('proto.innpv.protocol.WeightEntry', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.FromClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.innpv.protocol.FromClient.oneofGroups_);
};
goog.inherits(proto.innpv.protocol.FromClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.FromClient.displayName = 'proto.innpv.protocol.FromClient';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.innpv.protocol.FromClient.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.innpv.protocol.FromClient.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  INITIALIZE: 2,
  ANALYSIS: 3
};

/**
 * @return {proto.innpv.protocol.FromClient.PayloadCase}
 */
proto.innpv.protocol.FromClient.prototype.getPayloadCase = function() {
  return /** @type {proto.innpv.protocol.FromClient.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.innpv.protocol.FromClient.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.FromClient.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.FromClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.FromClient} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.FromClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumber: msg.getSequenceNumber(),
    initialize: (f = msg.getInitialize()) && proto.innpv.protocol.InitializeRequest.toObject(includeInstance, f),
    analysis: (f = msg.getAnalysis()) && proto.innpv.protocol.AnalysisRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.FromClient}
 */
proto.innpv.protocol.FromClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.FromClient;
  return proto.innpv.protocol.FromClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.FromClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.FromClient}
 */
proto.innpv.protocol.FromClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequenceNumber(value);
      break;
    case 2:
      var value = new proto.innpv.protocol.InitializeRequest;
      reader.readMessage(value,proto.innpv.protocol.InitializeRequest.deserializeBinaryFromReader);
      msg.setInitialize(value);
      break;
    case 3:
      var value = new proto.innpv.protocol.AnalysisRequest;
      reader.readMessage(value,proto.innpv.protocol.AnalysisRequest.deserializeBinaryFromReader);
      msg.setAnalysis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.FromClient} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FromClient.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.FromClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FromClient.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSequenceNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getInitialize();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.innpv.protocol.InitializeRequest.serializeBinaryToWriter
    );
  }
  f = this.getAnalysis();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.innpv.protocol.AnalysisRequest.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.FromClient} The clone.
 */
proto.innpv.protocol.FromClient.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.FromClient} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 sequence_number = 1;
 * @return {number}
 */
proto.innpv.protocol.FromClient.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.innpv.protocol.FromClient.prototype.setSequenceNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional InitializeRequest initialize = 2;
 * @return {proto.innpv.protocol.InitializeRequest}
 */
proto.innpv.protocol.FromClient.prototype.getInitialize = function() {
  return /** @type{proto.innpv.protocol.InitializeRequest} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.InitializeRequest, 2));
};


/** @param {proto.innpv.protocol.InitializeRequest|undefined} value  */
proto.innpv.protocol.FromClient.prototype.setInitialize = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.innpv.protocol.FromClient.oneofGroups_[0], value);
};


proto.innpv.protocol.FromClient.prototype.clearInitialize = function() {
  this.setInitialize(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromClient.prototype.hasInitialize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AnalysisRequest analysis = 3;
 * @return {proto.innpv.protocol.AnalysisRequest}
 */
proto.innpv.protocol.FromClient.prototype.getAnalysis = function() {
  return /** @type{proto.innpv.protocol.AnalysisRequest} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.AnalysisRequest, 3));
};


/** @param {proto.innpv.protocol.AnalysisRequest|undefined} value  */
proto.innpv.protocol.FromClient.prototype.setAnalysis = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.innpv.protocol.FromClient.oneofGroups_[0], value);
};


proto.innpv.protocol.FromClient.prototype.clearAnalysis = function() {
  this.setAnalysis(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromClient.prototype.hasAnalysis = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.InitializeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.InitializeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.InitializeRequest.displayName = 'proto.innpv.protocol.InitializeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.InitializeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.InitializeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.InitializeRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.InitializeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolVersion: msg.getProtocolVersion()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.InitializeRequest}
 */
proto.innpv.protocol.InitializeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.InitializeRequest;
  return proto.innpv.protocol.InitializeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.InitializeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.InitializeRequest}
 */
proto.innpv.protocol.InitializeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProtocolVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.InitializeRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.InitializeRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.InitializeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.InitializeRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getProtocolVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.InitializeRequest} The clone.
 */
proto.innpv.protocol.InitializeRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.InitializeRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 protocol_version = 1;
 * @return {number}
 */
proto.innpv.protocol.InitializeRequest.prototype.getProtocolVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.innpv.protocol.InitializeRequest.prototype.setProtocolVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.AnalysisRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.AnalysisRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.AnalysisRequest.displayName = 'proto.innpv.protocol.AnalysisRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.AnalysisRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.AnalysisRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.AnalysisRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.AnalysisRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mockResponse: msg.getMockResponse()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.AnalysisRequest}
 */
proto.innpv.protocol.AnalysisRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.AnalysisRequest;
  return proto.innpv.protocol.AnalysisRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.AnalysisRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.AnalysisRequest}
 */
proto.innpv.protocol.AnalysisRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMockResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.AnalysisRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.AnalysisRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.AnalysisRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.AnalysisRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMockResponse();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.AnalysisRequest} The clone.
 */
proto.innpv.protocol.AnalysisRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.AnalysisRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool mock_response = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.innpv.protocol.AnalysisRequest.prototype.getMockResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.innpv.protocol.AnalysisRequest.prototype.setMockResponse = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.FromServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.innpv.protocol.FromServer.oneofGroups_);
};
goog.inherits(proto.innpv.protocol.FromServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.FromServer.displayName = 'proto.innpv.protocol.FromServer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.innpv.protocol.FromServer.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.innpv.protocol.FromServer.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  ERROR: 2,
  INITIALIZE: 3,
  MEMORY_USAGE: 4,
  ANALYSIS_ERROR: 5,
  THROUGHPUT: 6,
  RUN_TIME: 7
};

/**
 * @return {proto.innpv.protocol.FromServer.PayloadCase}
 */
proto.innpv.protocol.FromServer.prototype.getPayloadCase = function() {
  return /** @type {proto.innpv.protocol.FromServer.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.innpv.protocol.FromServer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.FromServer.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.FromServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.FromServer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.FromServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumber: msg.getSequenceNumber(),
    error: (f = msg.getError()) && proto.innpv.protocol.ProtocolError.toObject(includeInstance, f),
    initialize: (f = msg.getInitialize()) && proto.innpv.protocol.InitializeResponse.toObject(includeInstance, f),
    memoryUsage: (f = msg.getMemoryUsage()) && proto.innpv.protocol.MemoryUsageResponse.toObject(includeInstance, f),
    analysisError: (f = msg.getAnalysisError()) && proto.innpv.protocol.AnalysisError.toObject(includeInstance, f),
    throughput: (f = msg.getThroughput()) && proto.innpv.protocol.ThroughputResponse.toObject(includeInstance, f),
    runTime: (f = msg.getRunTime()) && proto.innpv.protocol.RunTimeResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.FromServer}
 */
proto.innpv.protocol.FromServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.FromServer;
  return proto.innpv.protocol.FromServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.FromServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.FromServer}
 */
proto.innpv.protocol.FromServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequenceNumber(value);
      break;
    case 2:
      var value = new proto.innpv.protocol.ProtocolError;
      reader.readMessage(value,proto.innpv.protocol.ProtocolError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.innpv.protocol.InitializeResponse;
      reader.readMessage(value,proto.innpv.protocol.InitializeResponse.deserializeBinaryFromReader);
      msg.setInitialize(value);
      break;
    case 4:
      var value = new proto.innpv.protocol.MemoryUsageResponse;
      reader.readMessage(value,proto.innpv.protocol.MemoryUsageResponse.deserializeBinaryFromReader);
      msg.setMemoryUsage(value);
      break;
    case 5:
      var value = new proto.innpv.protocol.AnalysisError;
      reader.readMessage(value,proto.innpv.protocol.AnalysisError.deserializeBinaryFromReader);
      msg.setAnalysisError(value);
      break;
    case 6:
      var value = new proto.innpv.protocol.ThroughputResponse;
      reader.readMessage(value,proto.innpv.protocol.ThroughputResponse.deserializeBinaryFromReader);
      msg.setThroughput(value);
      break;
    case 7:
      var value = new proto.innpv.protocol.RunTimeResponse;
      reader.readMessage(value,proto.innpv.protocol.RunTimeResponse.deserializeBinaryFromReader);
      msg.setRunTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.FromServer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FromServer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.FromServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FromServer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSequenceNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.innpv.protocol.ProtocolError.serializeBinaryToWriter
    );
  }
  f = this.getInitialize();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.innpv.protocol.InitializeResponse.serializeBinaryToWriter
    );
  }
  f = this.getMemoryUsage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.innpv.protocol.MemoryUsageResponse.serializeBinaryToWriter
    );
  }
  f = this.getAnalysisError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.innpv.protocol.AnalysisError.serializeBinaryToWriter
    );
  }
  f = this.getThroughput();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.innpv.protocol.ThroughputResponse.serializeBinaryToWriter
    );
  }
  f = this.getRunTime();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.innpv.protocol.RunTimeResponse.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.FromServer} The clone.
 */
proto.innpv.protocol.FromServer.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.FromServer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 sequence_number = 1;
 * @return {number}
 */
proto.innpv.protocol.FromServer.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.innpv.protocol.FromServer.prototype.setSequenceNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ProtocolError error = 2;
 * @return {proto.innpv.protocol.ProtocolError}
 */
proto.innpv.protocol.FromServer.prototype.getError = function() {
  return /** @type{proto.innpv.protocol.ProtocolError} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.ProtocolError, 2));
};


/** @param {proto.innpv.protocol.ProtocolError|undefined} value  */
proto.innpv.protocol.FromServer.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.innpv.protocol.FromServer.oneofGroups_[0], value);
};


proto.innpv.protocol.FromServer.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromServer.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InitializeResponse initialize = 3;
 * @return {proto.innpv.protocol.InitializeResponse}
 */
proto.innpv.protocol.FromServer.prototype.getInitialize = function() {
  return /** @type{proto.innpv.protocol.InitializeResponse} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.InitializeResponse, 3));
};


/** @param {proto.innpv.protocol.InitializeResponse|undefined} value  */
proto.innpv.protocol.FromServer.prototype.setInitialize = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.innpv.protocol.FromServer.oneofGroups_[0], value);
};


proto.innpv.protocol.FromServer.prototype.clearInitialize = function() {
  this.setInitialize(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromServer.prototype.hasInitialize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MemoryUsageResponse memory_usage = 4;
 * @return {proto.innpv.protocol.MemoryUsageResponse}
 */
proto.innpv.protocol.FromServer.prototype.getMemoryUsage = function() {
  return /** @type{proto.innpv.protocol.MemoryUsageResponse} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.MemoryUsageResponse, 4));
};


/** @param {proto.innpv.protocol.MemoryUsageResponse|undefined} value  */
proto.innpv.protocol.FromServer.prototype.setMemoryUsage = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.innpv.protocol.FromServer.oneofGroups_[0], value);
};


proto.innpv.protocol.FromServer.prototype.clearMemoryUsage = function() {
  this.setMemoryUsage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromServer.prototype.hasMemoryUsage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AnalysisError analysis_error = 5;
 * @return {proto.innpv.protocol.AnalysisError}
 */
proto.innpv.protocol.FromServer.prototype.getAnalysisError = function() {
  return /** @type{proto.innpv.protocol.AnalysisError} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.AnalysisError, 5));
};


/** @param {proto.innpv.protocol.AnalysisError|undefined} value  */
proto.innpv.protocol.FromServer.prototype.setAnalysisError = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.innpv.protocol.FromServer.oneofGroups_[0], value);
};


proto.innpv.protocol.FromServer.prototype.clearAnalysisError = function() {
  this.setAnalysisError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromServer.prototype.hasAnalysisError = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ThroughputResponse throughput = 6;
 * @return {proto.innpv.protocol.ThroughputResponse}
 */
proto.innpv.protocol.FromServer.prototype.getThroughput = function() {
  return /** @type{proto.innpv.protocol.ThroughputResponse} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.ThroughputResponse, 6));
};


/** @param {proto.innpv.protocol.ThroughputResponse|undefined} value  */
proto.innpv.protocol.FromServer.prototype.setThroughput = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.innpv.protocol.FromServer.oneofGroups_[0], value);
};


proto.innpv.protocol.FromServer.prototype.clearThroughput = function() {
  this.setThroughput(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromServer.prototype.hasThroughput = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RunTimeResponse run_time = 7;
 * @return {proto.innpv.protocol.RunTimeResponse}
 */
proto.innpv.protocol.FromServer.prototype.getRunTime = function() {
  return /** @type{proto.innpv.protocol.RunTimeResponse} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.RunTimeResponse, 7));
};


/** @param {proto.innpv.protocol.RunTimeResponse|undefined} value  */
proto.innpv.protocol.FromServer.prototype.setRunTime = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.innpv.protocol.FromServer.oneofGroups_[0], value);
};


proto.innpv.protocol.FromServer.prototype.clearRunTime = function() {
  this.setRunTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromServer.prototype.hasRunTime = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.InitializeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.InitializeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.InitializeResponse.displayName = 'proto.innpv.protocol.InitializeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.InitializeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.InitializeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.InitializeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.InitializeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverProjectRoot: msg.getServerProjectRoot(),
    entryPoint: (f = msg.getEntryPoint()) && proto.innpv.protocol.Path.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.InitializeResponse}
 */
proto.innpv.protocol.InitializeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.InitializeResponse;
  return proto.innpv.protocol.InitializeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.InitializeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.InitializeResponse}
 */
proto.innpv.protocol.InitializeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerProjectRoot(value);
      break;
    case 2:
      var value = new proto.innpv.protocol.Path;
      reader.readMessage(value,proto.innpv.protocol.Path.deserializeBinaryFromReader);
      msg.setEntryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.InitializeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.InitializeResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.InitializeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.InitializeResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getServerProjectRoot();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getEntryPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.innpv.protocol.Path.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.InitializeResponse} The clone.
 */
proto.innpv.protocol.InitializeResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.InitializeResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string server_project_root = 1;
 * @return {string}
 */
proto.innpv.protocol.InitializeResponse.prototype.getServerProjectRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.innpv.protocol.InitializeResponse.prototype.setServerProjectRoot = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Path entry_point = 2;
 * @return {proto.innpv.protocol.Path}
 */
proto.innpv.protocol.InitializeResponse.prototype.getEntryPoint = function() {
  return /** @type{proto.innpv.protocol.Path} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.Path, 2));
};


/** @param {proto.innpv.protocol.Path|undefined} value  */
proto.innpv.protocol.InitializeResponse.prototype.setEntryPoint = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.innpv.protocol.InitializeResponse.prototype.clearEntryPoint = function() {
  this.setEntryPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.InitializeResponse.prototype.hasEntryPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.MemoryUsageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.innpv.protocol.MemoryUsageResponse.repeatedFields_, null);
};
goog.inherits(proto.innpv.protocol.MemoryUsageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.MemoryUsageResponse.displayName = 'proto.innpv.protocol.MemoryUsageResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.innpv.protocol.MemoryUsageResponse.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.MemoryUsageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.MemoryUsageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.MemoryUsageResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.MemoryUsageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    peakUsageBytes: msg.getPeakUsageBytes(),
    memoryCapacityBytes: msg.getMemoryCapacityBytes(),
    weightEntriesList: jspb.Message.toObjectList(msg.getWeightEntriesList(),
    proto.innpv.protocol.WeightEntry.toObject, includeInstance),
    activationEntriesList: jspb.Message.toObjectList(msg.getActivationEntriesList(),
    proto.innpv.protocol.ActivationEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.MemoryUsageResponse}
 */
proto.innpv.protocol.MemoryUsageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.MemoryUsageResponse;
  return proto.innpv.protocol.MemoryUsageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.MemoryUsageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.MemoryUsageResponse}
 */
proto.innpv.protocol.MemoryUsageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPeakUsageBytes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemoryCapacityBytes(value);
      break;
    case 3:
      var value = new proto.innpv.protocol.WeightEntry;
      reader.readMessage(value,proto.innpv.protocol.WeightEntry.deserializeBinaryFromReader);
      msg.getWeightEntriesList().push(value);
      msg.setWeightEntriesList(msg.getWeightEntriesList());
      break;
    case 4:
      var value = new proto.innpv.protocol.ActivationEntry;
      reader.readMessage(value,proto.innpv.protocol.ActivationEntry.deserializeBinaryFromReader);
      msg.getActivationEntriesList().push(value);
      msg.setActivationEntriesList(msg.getActivationEntriesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.MemoryUsageResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.MemoryUsageResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.MemoryUsageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.MemoryUsageResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPeakUsageBytes();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getMemoryCapacityBytes();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getWeightEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.innpv.protocol.WeightEntry.serializeBinaryToWriter
    );
  }
  f = this.getActivationEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.innpv.protocol.ActivationEntry.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.MemoryUsageResponse} The clone.
 */
proto.innpv.protocol.MemoryUsageResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.MemoryUsageResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 peak_usage_bytes = 1;
 * @return {number}
 */
proto.innpv.protocol.MemoryUsageResponse.prototype.getPeakUsageBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.innpv.protocol.MemoryUsageResponse.prototype.setPeakUsageBytes = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 memory_capacity_bytes = 2;
 * @return {number}
 */
proto.innpv.protocol.MemoryUsageResponse.prototype.getMemoryCapacityBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.innpv.protocol.MemoryUsageResponse.prototype.setMemoryCapacityBytes = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated WeightEntry weight_entries = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.innpv.protocol.WeightEntry>}
 */
proto.innpv.protocol.MemoryUsageResponse.prototype.getWeightEntriesList = function() {
  return /** @type{!Array.<!proto.innpv.protocol.WeightEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.innpv.protocol.WeightEntry, 3));
};


/** @param {Array.<!proto.innpv.protocol.WeightEntry>} value  */
proto.innpv.protocol.MemoryUsageResponse.prototype.setWeightEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.innpv.protocol.MemoryUsageResponse.prototype.clearWeightEntriesList = function() {
  this.setWeightEntriesList([]);
};


/**
 * repeated ActivationEntry activation_entries = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.innpv.protocol.ActivationEntry>}
 */
proto.innpv.protocol.MemoryUsageResponse.prototype.getActivationEntriesList = function() {
  return /** @type{!Array.<!proto.innpv.protocol.ActivationEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.innpv.protocol.ActivationEntry, 4));
};


/** @param {Array.<!proto.innpv.protocol.ActivationEntry>} value  */
proto.innpv.protocol.MemoryUsageResponse.prototype.setActivationEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.innpv.protocol.MemoryUsageResponse.prototype.clearActivationEntriesList = function() {
  this.setActivationEntriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.RunTimeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.innpv.protocol.RunTimeResponse.repeatedFields_, null);
};
goog.inherits(proto.innpv.protocol.RunTimeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.RunTimeResponse.displayName = 'proto.innpv.protocol.RunTimeResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.innpv.protocol.RunTimeResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.RunTimeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.RunTimeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.RunTimeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.RunTimeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    iterationRunTimeMs: msg.getIterationRunTimeMs(),
    runTimeEntriesList: jspb.Message.toObjectList(msg.getRunTimeEntriesList(),
    proto.innpv.protocol.RunTimeEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.RunTimeResponse}
 */
proto.innpv.protocol.RunTimeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.RunTimeResponse;
  return proto.innpv.protocol.RunTimeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.RunTimeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.RunTimeResponse}
 */
proto.innpv.protocol.RunTimeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIterationRunTimeMs(value);
      break;
    case 2:
      var value = new proto.innpv.protocol.RunTimeEntry;
      reader.readMessage(value,proto.innpv.protocol.RunTimeEntry.deserializeBinaryFromReader);
      msg.getRunTimeEntriesList().push(value);
      msg.setRunTimeEntriesList(msg.getRunTimeEntriesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.RunTimeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.RunTimeResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.RunTimeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.RunTimeResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIterationRunTimeMs();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getRunTimeEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.innpv.protocol.RunTimeEntry.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.RunTimeResponse} The clone.
 */
proto.innpv.protocol.RunTimeResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.RunTimeResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional float iteration_run_time_ms = 1;
 * @return {number}
 */
proto.innpv.protocol.RunTimeResponse.prototype.getIterationRunTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.innpv.protocol.RunTimeResponse.prototype.setIterationRunTimeMs = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated RunTimeEntry run_time_entries = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.innpv.protocol.RunTimeEntry>}
 */
proto.innpv.protocol.RunTimeResponse.prototype.getRunTimeEntriesList = function() {
  return /** @type{!Array.<!proto.innpv.protocol.RunTimeEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.innpv.protocol.RunTimeEntry, 2));
};


/** @param {Array.<!proto.innpv.protocol.RunTimeEntry>} value  */
proto.innpv.protocol.RunTimeResponse.prototype.setRunTimeEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.innpv.protocol.RunTimeResponse.prototype.clearRunTimeEntriesList = function() {
  this.setRunTimeEntriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.AnalysisError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.AnalysisError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.AnalysisError.displayName = 'proto.innpv.protocol.AnalysisError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.AnalysisError.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.AnalysisError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.AnalysisError} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.AnalysisError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorMessage: msg.getErrorMessage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.AnalysisError}
 */
proto.innpv.protocol.AnalysisError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.AnalysisError;
  return proto.innpv.protocol.AnalysisError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.AnalysisError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.AnalysisError}
 */
proto.innpv.protocol.AnalysisError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.AnalysisError} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.AnalysisError.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.AnalysisError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.AnalysisError.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.AnalysisError} The clone.
 */
proto.innpv.protocol.AnalysisError.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.AnalysisError} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string error_message = 1;
 * @return {string}
 */
proto.innpv.protocol.AnalysisError.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.innpv.protocol.AnalysisError.prototype.setErrorMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.ThroughputResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.ThroughputResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.ThroughputResponse.displayName = 'proto.innpv.protocol.ThroughputResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.ThroughputResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.ThroughputResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.ThroughputResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.ThroughputResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    samplesPerSecond: msg.getSamplesPerSecond(),
    predictedMaxSamplesPerSecond: msg.getPredictedMaxSamplesPerSecond()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.ThroughputResponse}
 */
proto.innpv.protocol.ThroughputResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.ThroughputResponse;
  return proto.innpv.protocol.ThroughputResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.ThroughputResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.ThroughputResponse}
 */
proto.innpv.protocol.ThroughputResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSamplesPerSecond(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPredictedMaxSamplesPerSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.ThroughputResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.ThroughputResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.ThroughputResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.ThroughputResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSamplesPerSecond();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getPredictedMaxSamplesPerSecond();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.ThroughputResponse} The clone.
 */
proto.innpv.protocol.ThroughputResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.ThroughputResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional float samples_per_second = 1;
 * @return {number}
 */
proto.innpv.protocol.ThroughputResponse.prototype.getSamplesPerSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.innpv.protocol.ThroughputResponse.prototype.setSamplesPerSecond = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float predicted_max_samples_per_second = 2;
 * @return {number}
 */
proto.innpv.protocol.ThroughputResponse.prototype.getPredictedMaxSamplesPerSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.innpv.protocol.ThroughputResponse.prototype.setPredictedMaxSamplesPerSecond = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.ProtocolError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.ProtocolError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.ProtocolError.displayName = 'proto.innpv.protocol.ProtocolError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.ProtocolError.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.ProtocolError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.ProtocolError} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.ProtocolError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorCode: msg.getErrorCode()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.ProtocolError}
 */
proto.innpv.protocol.ProtocolError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.ProtocolError;
  return proto.innpv.protocol.ProtocolError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.ProtocolError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.ProtocolError}
 */
proto.innpv.protocol.ProtocolError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.innpv.protocol.ProtocolError.ErrorCode} */ (reader.readEnum());
      msg.setErrorCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.ProtocolError} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.ProtocolError.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.ProtocolError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.ProtocolError.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getErrorCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.ProtocolError} The clone.
 */
proto.innpv.protocol.ProtocolError.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.ProtocolError} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ErrorCode error_code = 1;
 * @return {!proto.innpv.protocol.ProtocolError.ErrorCode}
 */
proto.innpv.protocol.ProtocolError.prototype.getErrorCode = function() {
  return /** @type {!proto.innpv.protocol.ProtocolError.ErrorCode} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.innpv.protocol.ProtocolError.ErrorCode} value  */
proto.innpv.protocol.ProtocolError.prototype.setErrorCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.innpv.protocol.ProtocolError.ErrorCode = {
  UNKNOWN: 0,
  UNSUPPORTED_PROTOCOL_VERSION: 1,
  UNINITIALIZED_CONNECTION: 2,
  ALREADY_INITIALIZED_CONNECTION: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.Path = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.innpv.protocol.Path.repeatedFields_, null);
};
goog.inherits(proto.innpv.protocol.Path, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.Path.displayName = 'proto.innpv.protocol.Path';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.innpv.protocol.Path.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.Path.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.Path.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.Path} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.Path.toObject = function(includeInstance, msg) {
  var f, obj = {
    componentsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.Path}
 */
proto.innpv.protocol.Path.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.Path;
  return proto.innpv.protocol.Path.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.Path} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.Path}
 */
proto.innpv.protocol.Path.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getComponentsList().push(value);
      msg.setComponentsList(msg.getComponentsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.Path} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.Path.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.Path.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.Path.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.Path} The clone.
 */
proto.innpv.protocol.Path.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.Path} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string components = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.innpv.protocol.Path.prototype.getComponentsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.innpv.protocol.Path.prototype.setComponentsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.innpv.protocol.Path.prototype.clearComponentsList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.FileReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.FileReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.FileReference.displayName = 'proto.innpv.protocol.FileReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.FileReference.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.FileReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.FileReference} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.FileReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    filePath: (f = msg.getFilePath()) && proto.innpv.protocol.Path.toObject(includeInstance, f),
    lineNumber: msg.getLineNumber()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.FileReference}
 */
proto.innpv.protocol.FileReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.FileReference;
  return proto.innpv.protocol.FileReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.FileReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.FileReference}
 */
proto.innpv.protocol.FileReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.innpv.protocol.Path;
      reader.readMessage(value,proto.innpv.protocol.Path.deserializeBinaryFromReader);
      msg.setFilePath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLineNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.FileReference} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FileReference.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.FileReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FileReference.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFilePath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.innpv.protocol.Path.serializeBinaryToWriter
    );
  }
  f = this.getLineNumber();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.FileReference} The clone.
 */
proto.innpv.protocol.FileReference.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.FileReference} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Path file_path = 1;
 * @return {proto.innpv.protocol.Path}
 */
proto.innpv.protocol.FileReference.prototype.getFilePath = function() {
  return /** @type{proto.innpv.protocol.Path} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.Path, 1));
};


/** @param {proto.innpv.protocol.Path|undefined} value  */
proto.innpv.protocol.FileReference.prototype.setFilePath = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.innpv.protocol.FileReference.prototype.clearFilePath = function() {
  this.setFilePath(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FileReference.prototype.hasFilePath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 line_number = 2;
 * @return {number}
 */
proto.innpv.protocol.FileReference.prototype.getLineNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.innpv.protocol.FileReference.prototype.setLineNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.ActivationEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.ActivationEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.ActivationEntry.displayName = 'proto.innpv.protocol.ActivationEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.ActivationEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.ActivationEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.ActivationEntry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.ActivationEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationName: msg.getOperationName(),
    sizeBytes: msg.getSizeBytes(),
    context: (f = msg.getContext()) && proto.innpv.protocol.FileReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.ActivationEntry}
 */
proto.innpv.protocol.ActivationEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.ActivationEntry;
  return proto.innpv.protocol.ActivationEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.ActivationEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.ActivationEntry}
 */
proto.innpv.protocol.ActivationEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSizeBytes(value);
      break;
    case 3:
      var value = new proto.innpv.protocol.FileReference;
      reader.readMessage(value,proto.innpv.protocol.FileReference.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.ActivationEntry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.ActivationEntry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.ActivationEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.ActivationEntry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperationName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSizeBytes();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getContext();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.innpv.protocol.FileReference.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.ActivationEntry} The clone.
 */
proto.innpv.protocol.ActivationEntry.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.ActivationEntry} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string operation_name = 1;
 * @return {string}
 */
proto.innpv.protocol.ActivationEntry.prototype.getOperationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.innpv.protocol.ActivationEntry.prototype.setOperationName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 size_bytes = 2;
 * @return {number}
 */
proto.innpv.protocol.ActivationEntry.prototype.getSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.innpv.protocol.ActivationEntry.prototype.setSizeBytes = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional FileReference context = 3;
 * @return {proto.innpv.protocol.FileReference}
 */
proto.innpv.protocol.ActivationEntry.prototype.getContext = function() {
  return /** @type{proto.innpv.protocol.FileReference} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.FileReference, 3));
};


/** @param {proto.innpv.protocol.FileReference|undefined} value  */
proto.innpv.protocol.ActivationEntry.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.innpv.protocol.ActivationEntry.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.ActivationEntry.prototype.hasContext = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.WeightEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.WeightEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.WeightEntry.displayName = 'proto.innpv.protocol.WeightEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.WeightEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.WeightEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.WeightEntry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.WeightEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    weightName: msg.getWeightName(),
    sizeBytes: msg.getSizeBytes(),
    gradSizeBytes: msg.getGradSizeBytes(),
    context: (f = msg.getContext()) && proto.innpv.protocol.FileReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.WeightEntry}
 */
proto.innpv.protocol.WeightEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.WeightEntry;
  return proto.innpv.protocol.WeightEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.WeightEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.WeightEntry}
 */
proto.innpv.protocol.WeightEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeightName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSizeBytes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGradSizeBytes(value);
      break;
    case 4:
      var value = new proto.innpv.protocol.FileReference;
      reader.readMessage(value,proto.innpv.protocol.FileReference.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.WeightEntry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.WeightEntry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.WeightEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.WeightEntry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWeightName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSizeBytes();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getGradSizeBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getContext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.innpv.protocol.FileReference.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.WeightEntry} The clone.
 */
proto.innpv.protocol.WeightEntry.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.WeightEntry} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string weight_name = 1;
 * @return {string}
 */
proto.innpv.protocol.WeightEntry.prototype.getWeightName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.innpv.protocol.WeightEntry.prototype.setWeightName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 size_bytes = 2;
 * @return {number}
 */
proto.innpv.protocol.WeightEntry.prototype.getSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.innpv.protocol.WeightEntry.prototype.setSizeBytes = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 grad_size_bytes = 3;
 * @return {number}
 */
proto.innpv.protocol.WeightEntry.prototype.getGradSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.innpv.protocol.WeightEntry.prototype.setGradSizeBytes = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional FileReference context = 4;
 * @return {proto.innpv.protocol.FileReference}
 */
proto.innpv.protocol.WeightEntry.prototype.getContext = function() {
  return /** @type{proto.innpv.protocol.FileReference} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.FileReference, 4));
};


/** @param {proto.innpv.protocol.FileReference|undefined} value  */
proto.innpv.protocol.WeightEntry.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.innpv.protocol.WeightEntry.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.WeightEntry.prototype.hasContext = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.RunTimeEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.RunTimeEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.RunTimeEntry.displayName = 'proto.innpv.protocol.RunTimeEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.RunTimeEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.RunTimeEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.RunTimeEntry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.RunTimeEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationName: msg.getOperationName(),
    forwardMs: msg.getForwardMs(),
    backwardMs: msg.getBackwardMs(),
    context: (f = msg.getContext()) && proto.innpv.protocol.FileReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.RunTimeEntry}
 */
proto.innpv.protocol.RunTimeEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.RunTimeEntry;
  return proto.innpv.protocol.RunTimeEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.RunTimeEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.RunTimeEntry}
 */
proto.innpv.protocol.RunTimeEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperationName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setForwardMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBackwardMs(value);
      break;
    case 4:
      var value = new proto.innpv.protocol.FileReference;
      reader.readMessage(value,proto.innpv.protocol.FileReference.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.RunTimeEntry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.RunTimeEntry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.RunTimeEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.RunTimeEntry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOperationName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getForwardMs();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getBackwardMs();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = this.getContext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.innpv.protocol.FileReference.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.RunTimeEntry} The clone.
 */
proto.innpv.protocol.RunTimeEntry.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.RunTimeEntry} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string operation_name = 1;
 * @return {string}
 */
proto.innpv.protocol.RunTimeEntry.prototype.getOperationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.innpv.protocol.RunTimeEntry.prototype.setOperationName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float forward_ms = 2;
 * @return {number}
 */
proto.innpv.protocol.RunTimeEntry.prototype.getForwardMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.innpv.protocol.RunTimeEntry.prototype.setForwardMs = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float backward_ms = 3;
 * @return {number}
 */
proto.innpv.protocol.RunTimeEntry.prototype.getBackwardMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.innpv.protocol.RunTimeEntry.prototype.setBackwardMs = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional FileReference context = 4;
 * @return {proto.innpv.protocol.FileReference}
 */
proto.innpv.protocol.RunTimeEntry.prototype.getContext = function() {
  return /** @type{proto.innpv.protocol.FileReference} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.FileReference, 4));
};


/** @param {proto.innpv.protocol.FileReference|undefined} value  */
proto.innpv.protocol.RunTimeEntry.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.innpv.protocol.RunTimeEntry.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.RunTimeEntry.prototype.hasContext = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.innpv.protocol);
