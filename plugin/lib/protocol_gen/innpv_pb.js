/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.innpv.protocol.FromClient', null, global);
goog.exportSymbol('proto.innpv.protocol.FromServer', null, global);
goog.exportSymbol('proto.innpv.protocol.InitializeRequest', null, global);
goog.exportSymbol('proto.innpv.protocol.InitializeResponse', null, global);
goog.exportSymbol('proto.innpv.protocol.Path', null, global);
goog.exportSymbol('proto.innpv.protocol.ProtocolError', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.FromClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.innpv.protocol.FromClient.oneofGroups_);
};
goog.inherits(proto.innpv.protocol.FromClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.FromClient.displayName = 'proto.innpv.protocol.FromClient';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.innpv.protocol.FromClient.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.innpv.protocol.FromClient.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  INITIALIZE: 1
};

/**
 * @return {proto.innpv.protocol.FromClient.PayloadCase}
 */
proto.innpv.protocol.FromClient.prototype.getPayloadCase = function() {
  return /** @type {proto.innpv.protocol.FromClient.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.innpv.protocol.FromClient.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.FromClient.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.FromClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.FromClient} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.FromClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialize: (f = msg.getInitialize()) && proto.innpv.protocol.InitializeRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.FromClient}
 */
proto.innpv.protocol.FromClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.FromClient;
  return proto.innpv.protocol.FromClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.FromClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.FromClient}
 */
proto.innpv.protocol.FromClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.innpv.protocol.InitializeRequest;
      reader.readMessage(value,proto.innpv.protocol.InitializeRequest.deserializeBinaryFromReader);
      msg.setInitialize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.FromClient} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FromClient.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.FromClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FromClient.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInitialize();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.innpv.protocol.InitializeRequest.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.FromClient} The clone.
 */
proto.innpv.protocol.FromClient.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.FromClient} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional InitializeRequest initialize = 1;
 * @return {proto.innpv.protocol.InitializeRequest}
 */
proto.innpv.protocol.FromClient.prototype.getInitialize = function() {
  return /** @type{proto.innpv.protocol.InitializeRequest} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.InitializeRequest, 1));
};


/** @param {proto.innpv.protocol.InitializeRequest|undefined} value  */
proto.innpv.protocol.FromClient.prototype.setInitialize = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.innpv.protocol.FromClient.oneofGroups_[0], value);
};


proto.innpv.protocol.FromClient.prototype.clearInitialize = function() {
  this.setInitialize(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromClient.prototype.hasInitialize = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.InitializeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.InitializeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.InitializeRequest.displayName = 'proto.innpv.protocol.InitializeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.InitializeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.InitializeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.InitializeRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.InitializeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolVersion: msg.getProtocolVersion()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.InitializeRequest}
 */
proto.innpv.protocol.InitializeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.InitializeRequest;
  return proto.innpv.protocol.InitializeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.InitializeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.InitializeRequest}
 */
proto.innpv.protocol.InitializeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProtocolVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.InitializeRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.InitializeRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.InitializeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.InitializeRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getProtocolVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.InitializeRequest} The clone.
 */
proto.innpv.protocol.InitializeRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.InitializeRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 protocol_version = 1;
 * @return {number}
 */
proto.innpv.protocol.InitializeRequest.prototype.getProtocolVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.innpv.protocol.InitializeRequest.prototype.setProtocolVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.FromServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.innpv.protocol.FromServer.oneofGroups_);
};
goog.inherits(proto.innpv.protocol.FromServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.FromServer.displayName = 'proto.innpv.protocol.FromServer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.innpv.protocol.FromServer.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.innpv.protocol.FromServer.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  ERROR: 1,
  INITIALIZE: 2
};

/**
 * @return {proto.innpv.protocol.FromServer.PayloadCase}
 */
proto.innpv.protocol.FromServer.prototype.getPayloadCase = function() {
  return /** @type {proto.innpv.protocol.FromServer.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.innpv.protocol.FromServer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.FromServer.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.FromServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.FromServer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.FromServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.innpv.protocol.ProtocolError.toObject(includeInstance, f),
    initialize: (f = msg.getInitialize()) && proto.innpv.protocol.InitializeResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.FromServer}
 */
proto.innpv.protocol.FromServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.FromServer;
  return proto.innpv.protocol.FromServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.FromServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.FromServer}
 */
proto.innpv.protocol.FromServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.innpv.protocol.ProtocolError;
      reader.readMessage(value,proto.innpv.protocol.ProtocolError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.innpv.protocol.InitializeResponse;
      reader.readMessage(value,proto.innpv.protocol.InitializeResponse.deserializeBinaryFromReader);
      msg.setInitialize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.FromServer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FromServer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.FromServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.FromServer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.innpv.protocol.ProtocolError.serializeBinaryToWriter
    );
  }
  f = this.getInitialize();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.innpv.protocol.InitializeResponse.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.FromServer} The clone.
 */
proto.innpv.protocol.FromServer.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.FromServer} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ProtocolError error = 1;
 * @return {proto.innpv.protocol.ProtocolError}
 */
proto.innpv.protocol.FromServer.prototype.getError = function() {
  return /** @type{proto.innpv.protocol.ProtocolError} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.ProtocolError, 1));
};


/** @param {proto.innpv.protocol.ProtocolError|undefined} value  */
proto.innpv.protocol.FromServer.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.innpv.protocol.FromServer.oneofGroups_[0], value);
};


proto.innpv.protocol.FromServer.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromServer.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InitializeResponse initialize = 2;
 * @return {proto.innpv.protocol.InitializeResponse}
 */
proto.innpv.protocol.FromServer.prototype.getInitialize = function() {
  return /** @type{proto.innpv.protocol.InitializeResponse} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.InitializeResponse, 2));
};


/** @param {proto.innpv.protocol.InitializeResponse|undefined} value  */
proto.innpv.protocol.FromServer.prototype.setInitialize = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.innpv.protocol.FromServer.oneofGroups_[0], value);
};


proto.innpv.protocol.FromServer.prototype.clearInitialize = function() {
  this.setInitialize(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.FromServer.prototype.hasInitialize = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.InitializeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.InitializeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.InitializeResponse.displayName = 'proto.innpv.protocol.InitializeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.InitializeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.InitializeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.InitializeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.InitializeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverProjectRoot: msg.getServerProjectRoot(),
    entryPoint: (f = msg.getEntryPoint()) && proto.innpv.protocol.Path.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.InitializeResponse}
 */
proto.innpv.protocol.InitializeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.InitializeResponse;
  return proto.innpv.protocol.InitializeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.InitializeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.InitializeResponse}
 */
proto.innpv.protocol.InitializeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerProjectRoot(value);
      break;
    case 2:
      var value = new proto.innpv.protocol.Path;
      reader.readMessage(value,proto.innpv.protocol.Path.deserializeBinaryFromReader);
      msg.setEntryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.InitializeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.InitializeResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.InitializeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.InitializeResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getServerProjectRoot();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getEntryPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.innpv.protocol.Path.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.InitializeResponse} The clone.
 */
proto.innpv.protocol.InitializeResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.InitializeResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string server_project_root = 1;
 * @return {string}
 */
proto.innpv.protocol.InitializeResponse.prototype.getServerProjectRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.innpv.protocol.InitializeResponse.prototype.setServerProjectRoot = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Path entry_point = 2;
 * @return {proto.innpv.protocol.Path}
 */
proto.innpv.protocol.InitializeResponse.prototype.getEntryPoint = function() {
  return /** @type{proto.innpv.protocol.Path} */ (
    jspb.Message.getWrapperField(this, proto.innpv.protocol.Path, 2));
};


/** @param {proto.innpv.protocol.Path|undefined} value  */
proto.innpv.protocol.InitializeResponse.prototype.setEntryPoint = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.innpv.protocol.InitializeResponse.prototype.clearEntryPoint = function() {
  this.setEntryPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.innpv.protocol.InitializeResponse.prototype.hasEntryPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.ProtocolError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.innpv.protocol.ProtocolError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.ProtocolError.displayName = 'proto.innpv.protocol.ProtocolError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.ProtocolError.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.ProtocolError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.ProtocolError} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.ProtocolError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorCode: msg.getErrorCode()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.ProtocolError}
 */
proto.innpv.protocol.ProtocolError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.ProtocolError;
  return proto.innpv.protocol.ProtocolError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.ProtocolError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.ProtocolError}
 */
proto.innpv.protocol.ProtocolError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setErrorCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.ProtocolError} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.ProtocolError.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.ProtocolError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.ProtocolError.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getErrorCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.ProtocolError} The clone.
 */
proto.innpv.protocol.ProtocolError.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.ProtocolError} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 error_code = 1;
 * @return {number}
 */
proto.innpv.protocol.ProtocolError.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.innpv.protocol.ProtocolError.prototype.setErrorCode = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.innpv.protocol.Path = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.innpv.protocol.Path.repeatedFields_, null);
};
goog.inherits(proto.innpv.protocol.Path, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.innpv.protocol.Path.displayName = 'proto.innpv.protocol.Path';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.innpv.protocol.Path.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.innpv.protocol.Path.prototype.toObject = function(opt_includeInstance) {
  return proto.innpv.protocol.Path.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.innpv.protocol.Path} msg The msg instance to transform.
 * @return {!Object}
 */
proto.innpv.protocol.Path.toObject = function(includeInstance, msg) {
  var f, obj = {
    componentsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.innpv.protocol.Path}
 */
proto.innpv.protocol.Path.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.innpv.protocol.Path;
  return proto.innpv.protocol.Path.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.innpv.protocol.Path} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.innpv.protocol.Path}
 */
proto.innpv.protocol.Path.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getComponentsList().push(value);
      msg.setComponentsList(msg.getComponentsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.innpv.protocol.Path} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.Path.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.innpv.protocol.Path.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.innpv.protocol.Path.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.innpv.protocol.Path} The clone.
 */
proto.innpv.protocol.Path.prototype.cloneMessage = function() {
  return /** @type {!proto.innpv.protocol.Path} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string components = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.innpv.protocol.Path.prototype.getComponentsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.innpv.protocol.Path.prototype.setComponentsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.innpv.protocol.Path.prototype.clearComponentsList = function() {
  jspb.Message.setField(this, 1, []);
};


goog.object.extend(exports, proto.innpv.protocol);
